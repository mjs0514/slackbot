컴퓨터는 쓸모가 없다. 그것은 그냥 대답만 할 수 있다. (Pablo Picasso, 피카소는 92세까지 살았는데 65세에 ENIAC이 등장했다.)
컴퓨터는 비키니와 같다. 사람들의 무성한 추측을 만들어낸다.(Sam Ewing, 작가)
컴퓨터를 갖게 되자 새로운 대량 살상무기가 만들어졌다.(Janet Reno, 미국 공무원)
컴퓨터와 함께 일하는 것은 멋지다. 그것은 당신과 싸우지도 않고 모든 것을 기억해주고 내 맥주를 뺏어 마시지도 않는다.(Paul Leary)
만일 자동차가 컴퓨터와 같은 개발 주기를 따른다면 롤스로이스는 처음에는 약 100달러 정도 할 것이고, 연비는 갤런당 백만마일 정도가 될 것이다. 하지만 일년에 한 번씩 폭발해 버려서 안에 탄 사람들을 모두 죽여버릴 것이다.(Robert X. Cringely, 테크 저널리스트)
컴퓨터는 점점 더 똑똑해지고 있다. 과학자들은 곧 그들이 우리에게 말을 걸 것이라고 말한다. 여기에서 그들이란 컴퓨터를 말한다. 과학자가 우리에게 말할 리는 없으니까. (Dave Barry, 컴퓨터광 유머작가)
나는 최근에 컴퓨터가 똑똑해져서 전 세계를 지배할 것이라는 공포가 거의 모든 문화권에서 거의 사라졌다는 것을 알게 되었다. 그리고 이것은 정확히 MS-DOS의 배포 시점과 일치했다. (Larry DeLuca)
‘컴퓨터가 생각할 수 있을까?’라고 묻는 것은 ‘잠수함이 물 속을 다닐 수 있을까?’라고 묻는 것과 같다. (Edsger W. Dijkstra, 구조적 프로그래밍, 세마포어 등으로 유명한 컴퓨터 과학자)
100년을 살면서 단지 300 MB 밖에 기억 못하는 것은 너무 가혹하다. CD 한 장보다 못하지 않나? 인간의 조건은 정말 점점 더 초라해지고 있다. (Marvin Minsky, AI로 유명한 컴퓨터 과학자)
중앙컴퓨터가 말했나, 알투디투? 낯선 컴퓨터는 믿지 않는게 좋아. (C3PO, 스타워즈)
창 밖으로 집어던질 수 없는 컴퓨터는 절대 믿지 마라. (Steve Wozniak, 애플 창업자)
하드웨어 : 사람이 발로 걷어찰 수 있는 컴퓨터의 부분(Jeff Pesis, 프로그래머)
오늘날의 모든 소프트웨어는 구조적인 완결성 없이 폭력과 수천 만의 노예들로 벽돌을 한 장 한 장씩 올려 만든 피라미드와 같다. (Alan Kay, 객체지향 프로그래밍의 아버지)
나는 드디어 상위호환성upward compatible이 무엇인지를 알아냈다. 그것은 우리가 오래된 모든 실수를 다 떠안아야 한다는 의미이다. (Dennie van Tassel, 컴퓨터 과학자, ‘프로그래밍 언어의 역사’를 저술했다.)
버클리에서 나온 두 개의 제품이 있다. 바로 LSD(환각제)와 UNIX 다. 우리는 이것이 우연의 일치라고 믿을 수 없다.(Jeremy S. Anderson, 프로그래머)
2038년 1월 19일 오전 3시 14분 07초, ? Unix 세상의 끝 (1970년 1월 1일 이후 2의 32승이 되는 때이기 때문에)
밖에 있는 모든  운영 시스템이 거의 똑같다. 우리 모두 망했다. (2003년 MS의 부사장인 브라이언 발렌타인이 OS를 보안 관점에서 이야기하며)
MS가 Windows XP를 내어 놓자 모든 사람들은 ‘이제까지 가장 신뢰성이 높은 윈도우’라고 극찬을 했다. 그러나 나에게는 ‘아스파라거스가 이제까지 가장 확실한 채소 ‘라고 말하는 것과 같았다. (Dave Barry, 컴퓨터광 유머 작가)
인터넷? 그게 아직도 있어? (Homer Simpson, 만화캐릭터)
이미 수백 만 개의 타자기 앞에 수백 만 원숭이들이 앉아있지만 유즈넷에는  세익스피어가 없다.(Blair Houghton)
컴퓨터 소프트웨어 산업이 이룩한 가장 놀랄만한 성과는 하드웨어 산업이 만들어 놓고 있는 꾸준하고도 놀랄만한 성과들을 착실하게 깍아 먹고 있다는 것이다.(Henry Petroski, 실패 분석으로 유명한 엔지니어)
진정한 혁신이란 시장을 시작하기에는 충분히 가볍지만, 그것을 소유할 힘이 없는 작은 스타트업으로부터 발생된다. (Timm Martin, 게임 개발자)
위대한 과학은 거인의 어깨 위에 거인이 올라선 경우처럼 어렵게 비유 되곤 한다. 그러나 소프트웨어 산업은 난쟁이 발가락 위에 서 있는 난쟁이처럼 매우 쉬운 것처럼 이야기 된다.(Alan Cooper, 비쥬얼 베이직의 아버지, 제발 안 쉬운 걸 쉽다고 이야기하지 마세요.)
이것은 비트나 바이트, 프로토콜에 대한 것이 아니다. 이익과 손실, 그리고 마진에 대한 것이다. (Lou Gerstner, 맥킨지 CEO)
우리는 마이크로소프트다. 저항은 소용없다. 당신은 결국 우리와 동화될 것이다. (Bumper sticker, 자동차 범퍼)
데모가 아무리 매끄럽다고 하더라도 완벽한 프리젠테이션을 할 확률은 지켜보는 사람의 숫자에 반비례 하며 투입되는 돈에 정비례 한다.(Mark Gibbs, 저널리스트)
모든 특허는 헛소리다. 그것을 읽느라 시간을 낭비할 필요가 없다. 왜냐하면 특허란 소유권자가 그렇게 할거냐 아니냐에 좌우되기 때문이다.(Linus Torvalds, 리눅스 창시자)
복잡성을 통제하는 것이 컴퓨터 프로그래밍의 기초다.(Brian Kernigan, 컴퓨터 과학자, 최초로 C언어 프로그래밍이란 책을 저술했다.)
복잡성은 개발자들의 생명을 갉아먹는다. 그것은 제품을 기획하고 만들고 테스트하기 어렵게 한다. 그것은 보안을 위협하고 사용자와 운영자가 좌절하게 만든다. (Ray Ozzie, 소프트웨어 아키텍트)
소프트웨어 설계를 하는 두가지 방법이 있다. 하나는 빠진 게 없는지 쉽게 확인할 수 있게 최대한 단순하게 만드는 것이고, 또 한가지는 빠진 게 없는지 확인할 수 없게 최대한 복잡하게 만드는 것이다.(C.A.R. Hoare, Quick Sort의 고안자)
좋은 소프트웨어의 기능이란 복잡한 것을 간단하게 보이도록 만드는 것이다. (Grady Booch, UML 개발자)
기억하라. 당신은 컴퓨터 서적이 시키는 대로 하는 바보가 아니다. 실제 바보란 아무리 전문가라고 하더라도 일반인들이 사용할 수 없는 하드웨어와 소프트웨어를 설계하는 사람들을 말한다. (Walter Mossberg, 유명한 테크 저널리스트)
소프트웨어 공급자들은 자신들의 소프트웨어 패키지를 더욱 ‘사용자 친화적’으로 만드려고 노력해왔다. 그 중에서 가장 잘한 일은 브로셔의 ‘사용자 친화적’이라는 단어에 동그라미를 치는 것이었다. (Bill Gates, MS의 창립자)
컴퓨터가 핸드폰과 비슷한 수준으로 사용하기 쉬워지기를 바랐던 남자가 있었다. 그런데 전화기 사용법이 컴퓨터만큼 어려워지면서 그 소원이 자연스레 이루어졌다.  (Bjarne Stroustrup, C++언어를 개발한 사람)
어떤 바보라도 컴퓨터를 사용할 수 있다. 그래서 많은 사람들이 컴퓨터를 사용한다.(Ted Nelson, HTML을 처음으로 생각해 낸 사회과학자)
고객을 ‘유저’라고 부르는 산업은 딱 두 개가 있다. ? Drugs, IT (Edward Tufte, 데이터 시각화의 선구자)
프로그래머들은 더 많은 멍청이들을 만들지 않기 위해 TV 시리즈 the Universe와 경쟁하고 있지만 the Universe는 더 많은 멍청이를 만들기 위해 애쓰고 있다. 그런데 아직까지는 the Universe가 이기고 있다.(Rich Cook, 판타지 소설가, 이 다큐멘터리는 컴퓨터 그래픽을 많이 쓰기로 유명했다.)
당신들 대부분이 프로그래머의 3대 미덕을 이미 잘 알고 있다. ? 게으름, 괴팍함, 그리고 자만심. (Larry Wall, Perl 언어의 창시자)
프로그래머의 문제점은 그들이 늦어버릴 때까지는 무엇을 하고 있는지 절대 물어볼 수 없다는 것이다. (Seymour Cray, 슈퍼컴퓨터 크레이를 만든 사람)
그들이 컴퓨터를 미워할 것이라고 생각하는 사람들이 있다. 그러나 그들이 진짜로 미워하는 것은 형편없는 프로그래머들이다.(Larry Niven, Ringworld  유명한 SF소설가)
꽤 오랫동안 사람들은 그렇게 비싸고 멋있는 것들이 왜 그렇게 쓸모가 없는지 혼란스러워 했다. 그런데 나는 프로그래머가 바보같은 일을 하는 똑똑한 사람들인 반면, 컴퓨터는 엄청 똑똑한 일을 하는 바보 상자라는 것을 알게 되자 비로소 그 심정이 이해가 되었다. 정말 찰떡 궁합이다.(Bill Bryson, 유명한 작가)
붓과 색을 공부한다고 훌륭한 화가가 되지 않듯 컴퓨터 과학을 공부한다고 훌륭한 프로그래머가 되지는 않는다.(Eric Raymond, 인류학자, 오픈소스 운동의 대표 서술가)
프로그래머란 다음과 같은 과정을 거쳐서 전문가로 탄생한 사람을 말한다. 그들은 1) 미완의 문서에서 나온 미완의 도표에 기반한 모호한 가정들로부터 미세한 수준까지 계산해서 답변을 하거나 2)  무언가를 묻기 힘들 정도로 완전히 걸레가 된 부서를 괴롭히기 위해  애매하게 묻는 사람들이 제시하는 부정확한 수단들을 바탕으로 소프트웨어를 개발하는 사람들이다. (IEEE Grid newsmagazine 잡지, 요약하면 굉장히 복잡한 상황에서 일하는 사람이라는 뜻)
해커란 7,8명의 개발자들이 1년 동안 어렵게 개발하는 것들을 단 몇 달만에 혼자서 개발할 수 있는 사람을 말한다. IBM은 어떤 프로그래머들은 다른 이들보다 100배 이상의 더 많은 일을 할 수 있다고 보고했었다. (Peter Seebach, Unix 전문 테크 저널리스트)
최고의 프로그래머는 그냥 좋은 프로그래머들보다 조금 더 나은 게 아니다. 그들은 어떻게 측정하던 간에 보통 사람들 보다 한 자리 수 이상이다. : 창의력, 스피드, 설계능력, 문제해결 능력까지. (Randall E. Stross, 뉴욕타임즈 테크부문 기자)
훌륭한 기계공은 일반 기계공보다 몇 배의 급여를 더 높이 받는다. 그러나 훌륭한 코드를 만들어내는 개발자는 일반적인 개발자보다 1만배 이상의 가치가 있다. (Bill Gates)
올바로 작동하지 않는다고 걱정하지 마라. 만일 모든 게 잘 된다면, 굳이 당신이 일할 이유가 없다.(Mosher’s Law of Software Engineering)
코드 수를 기준으로 프로그램의 진도를 측정하는 것은 비행기 제작 진도를 무게로 측정하는 것과 같다. (Bill Gates)
코딩이란 사회조직에서 도굴보다는 위면서 관리의 바로 밑 어디엔가 위치하는 직업이다. “Writing code has a place in the human hierarchy worth somewhere above grave robbing and beneath managing.” (Gerald Weinberg, 컴퓨터 과학자, 소프트웨어 개발관련 인류학 및 심리학 교수)
처음에는 컴퓨터 과학과 이론을 배워라. 그리고는 프로그래밍 스타일을 익혀라. 그리고는 모두 잊어버려라. 그저 해킹hack하라.(George Carrette, SIOD의 창시자, hack이란 개발에 몰두하는 것으로 의역할 수 있을 듯)
먼저 문제를 풀고 그 다음에 개발을 하라.(John Johnson, 미국의 유명한 소프트웨어 강사)
낙관론은 프로그래머라는 직업 관점에서 위험물이다. 피드백이 해결책이다.(Kent Beck, Extreme 프로그래밍 방법론의 창시자, 무의식적으로 금방 된다고 이야기하지 마세요. 경험상 진짜 금방 되는 경우를 거의 본적이 없는 것 같네요.)
“To iterate is human, to recurse divine.” (L. Peter Deutsch, PDF Interpreter, Ghostscript, PostScript의 창시자)
Boolean 이 좋은 것은 당신이 설령 잘못했더라도 한 비트만 바꾸면 된다는 것이다. (익명)
Array는 꼭 0이나 1에서 시작해야 하나? 내 생각에는 0.5 에서 시작하면 어떨까라는 내 의견은 충분한 검토 없이 기각된 것 같다. (Stan Kelly-Bootle, 컴퓨터 과학자)
세상에는 딱 두 가지 프로그래밍 언어가 있다. 사람들이 욕하는 언어와 아무도 사용하지 않는 언어.(Bjarne Stroustrup, C++의 창시자)
PHP는 성숙되지 않은 아마츄어에 의해 눈에 띄게 저질러지는 작은 악이라면, Perl은 숙련되었지만 비정상적인 프로들에 의해 눈에 띄지 않게 저질러지는 커다란 악이다. (Jon Ribbens, 개발자)
COBOL 은 사람의 마음을 망가뜨린다. 그것을 가르치는 것은 범죄행위로 간주해야 한다.(E.W. Dijkstra, 독일 컴퓨터 과학자)
먼저 BASIC에 노출된 학생들에게 좋은 프로그래밍 스타일을 가르친다는 것은 현실적으로 불가능하다. 그들은 잠재적인 프로그래머로서 재교육으로 치유될 수 없는 정신적인 피해를 입은 것이다.(E. W. Dijkstra, 상동)
내 생각에 MS가 .Net 이라고 이름을 붙인 이유는 유닉스 상에서 안 보이게 하고 싶었던 거다. (Oktal)
아무리 구조가 잘 되어 있더라도 프로그래머가 나쁜 프로그램을 만드는 것을 방지하는 프로그래밍 언어는 없다. (Larry Flon, 구조적 프로그래밍에 대한 연구 저자)
컴퓨터 언어를 설계하는 것은 공원을 산책하는 것과 같다. ‘쥬라기 공원!!!’ (Larry Wall, Perl 언어의 창시자)
50년간 연구를 했다. 결국 C++인가? (Richard A. O’Keefe, Functional Programming 연구에 힘쓰는 컴퓨터 과학자)
C,C++을 쓰는 것은 안전가드를 제거한 전기톱을 쓰는 것과 같다. (Bob Gray)
C++에서는 스스로 발을 쏘기는 매우 어렵다. 그러나 만일 그렇게 되면 다리 전체를 날려버리게 된다. (Bjarne Stroustrup, C++언어의 창시자)
C++ : 친구들이 당신의 개인적인 멤버들과 만날 수 있는 곳. (Gavin Russell Baker)
로마 제국이 망한 이유 중의 하나는 그들이 C프로그램이 성공적으로 종료되었는지 표시할 방법이 없었기 때문이다. (Robert Firth)
자바는 많은 부분에서 C++- (=C++ 의 마이너스 버전)이다.(Michael Feldman, SIGAda 의장)
좋아요. 자바는 프로그래밍 언어가 보여줄 수 있는 좋은 예입니다. 그러나 자바 어플리케이션은 절대 그렇게 되지 않아야 하는 좋은 예입니다.(pixadel)
자바가 정말로 가비지 콜렉션을 한다면, 대부분의 프로그램들은 실행 중에 자기자신을 지워버릴지도 모른다.(Robert Sewell)
무료 소프트웨어를 두려워하는 사람들은 자신들의 제품이 그것보다 못하기 때문이다. (David Emery, 오픈소스 개발자)
훌륭한 코드는 훌륭한 문서보다 낫다.(Steve McConnell, 개발자)
당신이 6개월 이상 한 번도 보지 않은 코드는 다른 사람이 다시 만드는 게 훨씬 더 나을 수 있다.(Eagleson’s Law)
코드의 90%는 개발 시간의 90%를 설명해준다. 나머지 10%는 그 시간에 일어났던 다른 일의  90%를 설명해준다. (Tom Cargill, 벨연구소 개발자)
좋은 프로그래머는 자신들의 두뇌를 사용한다. 그러나 좋은 가이드라인은 모든 케이스를 고려해야만 하는 노력을 줄여준다. (Francis Glassborow, 개발자)
우리의 소프트웨어는 의미있는 요구사항을 거의 가지고 있지 않다. 그럼에도 불구하고 유일한 성공의 척도는 우리의 솔루션이 갈팡질팡하는 고객의 문제점을 해결해 줄 수 있느냐 하는 것이다.” In software, we rarely have meaningful requirements.  Even if we do, the only measure of success that matters is whether our solution solves the customer’s shifting idea of what their problem is.” (Jeff Atwood, StackOverFlow의 창립자)
우리 컴퓨터 프로그램의 슬픈 상태를 고려해보면  소프트웨어 개발은 아직은 어둠의 마법Black Art이다. 아직은 엔지니어링an engineering discipline이라고 부르기는 어렵다. (Bill Clinton, 미국 대통령)
훌륭한 개발팀 없이 훌륭한 소프트웨어를 만들 수 없다. 그러나 대부분의 개발팀들은 문제있는 가족들처럼 행동한다. (Jim McCarthy, AI 용어를 만든사람, 인지 과학자)
우리는 프로그래밍을 시작하자 마자 생각했던 대로  만들기 쉽지 않다는 것에 놀라게 된다. 그래서 디버깅이 만들어졌다. 나는 인생의 대부분이 내 프로그램의 실수를 찾아내는데 낭비되고 있음을 알게 된 그 때를 정확히 기억한다. (Maurice Wilkes 이 디버깅을 발견하다. 1949년, EDSAC과 마이크로프로그래밍의 창시자)
디버깅은 처음 코드를 만드는 것보다 두 배는 어렵다. 그래서 만일 당신이 가능한 공들여서 코드를 짜고 있다면 디버깅 하기에는 충분히 똑똑하지 않다는 뜻이기도 하다. (Brian Kernighan, Unix 창시자)
만일 디버깅이 벌레를 잡는 과정이라면 프로그래밍은 그걸 집어넣는 과정이다.(Edsger W. Dijkstra, 구조적 프로그래밍, 세마포어로 유명한 컴퓨터 과학자)
당신의 컴퓨터에서 돌아가는 건 중요하지 않다. 당신의 컴퓨터로 서비스하는 게 아니기 때문이다. (Vidiu Platon)
에러 없는 프로그램을 만드는 데는 두가지 방법이 있다. 그런데  세번째 것만 작동한다. (Alan J. Perlis, 알골 프로그램 창시자)
당신은 소프트웨어 품질을 추구할 수도 있고, 포인터 연산을 할 수도 있다. 그러나 두 개를 동시에 할 수는 없다. (Bertrand Meyer, 에펠 언어의 창시자)
만일 소프트웨어 회사가 맥도날드라면, 수백개의 빅맥 중 하나가 식중독을 일으킬 때 아마 이렇게 말할 것이다. ‘죄송합니다. 고객님. 여기 쿠폰 두 장을 받으세요…’ (Mark Minasi, 윈도우 개발계의 대부)
항상 이런 생각으로 개발에 임하라. “내 소스를 유지보수하게 되는 개발자가 내가 어디 살고 있는지 알고 있는 과격한 사이코패스일 것이다.” (Martin Golding)
실수는 사람의 것이다. 그러나 정말 일을 엉망으로 만들고 싶다면 컴퓨터가 필요하다. (Paul Ehrlich)
컴퓨터는 그동안 인류 역사에서 발명했던 그 어떠한 것들 보다 더 빠르고 더 많은 실수들을 사람들이 하게 만든다. ? 권총과 데낄라를 제외하고는 (Mitch Radcliffe)
오늘날 프로그래밍은 거대해지고 더 나은 멍청이 입증 프로그램을 구축하려 애쓰는  소프트웨어 공학자와 거대해지고 더 나은 멍청이를 만들려는 대학의 경쟁이다. 지금까지는 대학이 이기고 있다. ? 릭 쿡(Rick Cook)
리스프는 언어가 아닌, 건축 자재이다. ? 앨런 케이(Alan Kay)
물 위를 걷는 것과 명세서로 소프트웨어를 개발하는 것은 쉽다. 둘 다 동결되었다면…… ? 에드워드 V 베라드(Edward V Berard)
프로그래밍 언어로 작성한 프로그램이 상관 없는 것에 주의해야 한다면 그 언어는 하위 언어이다. ? 앨런 펄리스(Alan J. Perlis)
C 프로그램은 막 왁스칠 한 마루에서 면도날을 가진 사람이 빠른 춤을 추는 것과 같다. ? Waldi Ravens (NetBSD에서 활동하는 분인듯)
난 언제나 내 컴퓨터가 전화 만큼 사용하기 편했으면 좋겠고 생각했다. 이제 도무지 전화를 어떻게 사용해야 할지 알 수 없게 됐으니 내 소원은 이루어졌다. ? 감히 입에 담을 수 없는 그분(Bjarne Stroustrup)
붓과 물감을 공부하면 누군가 전문 화가가 될 수 있겠지만 컴퓨터 과학 교육은 이제 아무도 전문 프로그래머로 만들지 못한다. ? 에릭 S 레이먼드(Eric S. Raymond)
올바로 동작하지 않더라도 걱정말아라. 모든 것이 그랬다면, 넌 직업을 잃었을테니까. ? 소프트웨어 공학에서의 모셔의 법칙(Mosher’s Law)
우리 컴퓨터 프로그램의 안타까운 현 상태를 논한다면, 소프트웨어 개발은 여전히 흑마술이 분명하며,  아직 공학이라고 부를 수 없다. ? 빌 클린턴(Bill Clinton)
오랜 시간 나는 그토록 비싸고, 그토록 첨단인 무엇이 그토록 쓸모 없을 수 있는지 이해하지 못했다. 그러다가 컴퓨터는 놀랍도록 똑똑한 것을 할 수 있는 멍청한 기계이고, 컴퓨터 프로그래머는 놀랍도록 멍청한 짓을 할 수 있는 똑똑한 사람이라는 생각이 들었다.  즉, 둘은 완벽한 한 쌍이다. ? 빌 브라이슨(Bill Bryson)
좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다. ? 토마스 C. 게일(Thomas C. Gale)
파이썬이 베이식과 동급이라면 옵티머스 프라임은 트럭이다. ? 코리 도트(Cory Dodt)
말은 쉽지, 코드를 보여줘. Talk is cheap. Show me the code. ? 리누스 토르발스(Linus Torvalds)
인간적인 반복, 성스러운 재귀. To iterate is human, to recurse divine. ? L. 피터 도이치(L. Peter Deutsch)
좋은 프로그래머 대부분은 돈이나 대중에게 받을 찬사를 기대하고 프로그래밍을 하지 않고 프로그래밍이 재미 있어서 한다. Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program. ? 리누스 토르발스(Linus Torvalds)
결국 당신 코드를 유지보수하게 될 친구가 당신이 어디에 사는지 아는 광폭한 싸이코패스가 될 것이라고 여기고 코드를 작성하라. Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. ? 마틴 골딩(Martin Golding)
